
module Sets

import Equality


-- |
-- A set is defined by a (decidable) proposition.
-- 
public export
Set : (t : Type) -> Type
Set t = t -> Type

-- |
-- We check that something is an element of a set by evaluating it
-- with the set proposition.
-- 
public export
element : {t : Type} -> (s : Set t) -> (x : t) -> Type
element {t} s x = s x


-- |
-- Sets generated by some number of generator elements, as well as
-- combinations of existing elements.
-- 
data GeneratedSet : (t : Type) -> t -> Type where
    -- |
    -- A generator element of the set.
    -- 
    Generator : (x : t) -> GeneratedSet t x

    -- |
    -- An element of the set generated by a single-argument function.
    -- 
    Generated1 : (m : t -> t)
              -> (x : t) -> GeneratedSet t x
              -> GeneratedSet t (m x)

    -- |
    -- An element of the set generated by a two-argument function.
    -- 
    Generated2 : (m : t -> t -> t)
              -> (x : t) -> GeneratedSet t x
              -> (y : t) -> GeneratedSet t y
              -> GeneratedSet t (m x y)


-- |
-- One set is a subset of another if satisfying the first set's
-- proposition always implies satisfying the second one's proposition
-- as well.
-- 
public export
IsSubset : {t : Type} -> (u, v : Set t) -> Type
IsSubset {t} u v = (x : t) -> u x -> v x

-- |
-- Two sets are equal if they are both subsets of each other.
-- 
public export
SetEq : {t : Type} -> (u, v : Set t) -> Type
SetEq {t} u v = (IsSubset u v, IsSubset v u)


||| Set operations with closure built-in

public export
ClosedOp1 : {t : Type} -> (s : Set t) -> Type
ClosedOp1 {t} s = (x : t) -> s x -> DPair t s

public export
ClosedOp2 : {t : Type} -> (s : Set t) -> Type
ClosedOp2 {t} s =
    (x : t) -> s x -> (y : t) -> s y -> DPair t s
